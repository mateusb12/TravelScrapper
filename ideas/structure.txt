	1. The system should allow users to sign up and log in to their account in order to create new queries

	2. The system should store historical data for each query, including the daily average prices for each
day the query was active

	3. The system should allow users to view the current status of their queries and access the historical
data for each query

	4. The system should allow users to modify or delete existing queries as needed

	5. Write code to periodically query the API endpoint for flight price data.
This could be done on a regular schedule (e.g. every hour) using a task scheduler or cron job.
Alternatively, you could use a webhook or other real-time notification system to receive updates as soon as
new flight price data becomes available.

	6. Consider adding a user interface for your flight price monitor, either through a web app or a mobile app.
This will make it easier for users to interact with your application and access flight information.

	7. Deploy the system to a production environment, and monitor it to ensure that it is functioning correctly
and meeting the needs of users. This might involve monitoring logs and metrics, and making updates or changes as needed
to improve the system's performance and reliability.